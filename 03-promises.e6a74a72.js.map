{"mappings":"gfAAA,IAAAA,EAAAC,EAAA,SAEMC,EAAO,CACXC,WAAYC,SAASC,cAAc,uBACnCC,UAAWF,SAASC,cAAc,sBAClCE,YAAaH,SAASC,cAAc,wBACpCG,SAAUJ,SAASC,cAAc,0BAgCnC,SAASI,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAgBC,KAAKC,SAAW,GAEtCC,YAAW,WACLH,EACFF,EAAQ,CAAEH,WAAUC,UAEpBG,EAAO,CAAEJ,WAAUC,YAEpBA,MAvCPT,EAAKM,SAASW,iBAAiB,SAE/B,SAAoBC,GAClBA,EAAEC,iBAEF,IAAQlB,EAAuCD,EAAvCC,WAAYG,EAA2BJ,EAA3BI,UAAWC,EAAgBL,EAAhBK,YAE/B,IAAKJ,EAAWmB,QAAUhB,EAAUgB,QAAUf,EAAYe,MAExD,YADAtB,EAAAuB,OAAOC,QAAS,yCAQlB,IAJA,IAAMC,GAAUlB,EAAYe,MACtBI,GAAQpB,EAAUgB,MACpBK,GAASxB,EAAWmB,MAEfM,EAAQ,EAAGA,EAAQH,EAAQG,IAAS,CAE3CnB,EADiBmB,EAAQ,EACDD,GACrBE,MAAK,SAAAC,G,IAAGpB,EAAQoB,EAARpB,SAAUC,EAAKmB,EAALnB,MACjBX,EAAAuB,OAAOQ,QAAQ,qBAAoCC,OAAftB,EAAS,QAAYsB,OAANrB,EAAM,UAE1DsB,OAAM,SAAAH,G,IAAGpB,EAAQoB,EAARpB,SAAUC,EAAKmB,EAALnB,MAClBX,EAAAuB,OAAOC,QAAQ,oBAAmCQ,OAAftB,EAAS,QAAYsB,OAANrB,EAAM,UAE5DgB,GAASD,M","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst refs = {\n  delayField: document.querySelector('input[name=\"delay\"]'),\n  stepField: document.querySelector('input[name=\"step\"]'),\n  amountField: document.querySelector('input[name=\"amount\"]'),\n  buttonEl: document.querySelector('button[type=\"submit\"]'),\n};\n\nrefs.buttonEl.addEventListener('click', onBtnClick);\n\nfunction onBtnClick(e) {\n  e.preventDefault();\n\n  const { delayField, stepField, amountField } = refs;\n\n  if (!delayField.value || !stepField.value || !amountField.value) {\n    Notify.failure(`Error: all fields must be filled in !`);\n    return;\n  }\n\n  const amount = +amountField.value;\n  const step = +stepField.value;\n  let delay = +delayField.value;\n\n  for (let index = 0; index < amount; index++) {\n    const position = index + 1;\n    createPromise(position, delay)\n      .then(({ position, delay }) => {\n        Notify.success(`Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        Notify.failure(`Rejected promise ${position} in ${delay}ms`);\n      });\n    delay += step;\n  }\n}\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n"],"names":["$h6c0i","parcelRequire","$ce04d3a99e08e73b$var$refs","delayField","document","querySelector","stepField","amountField","buttonEl","$ce04d3a99e08e73b$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","addEventListener","e","preventDefault","value","Notify","failure","amount","step","delay1","index","then","param","success","concat","catch"],"version":3,"file":"03-promises.e6a74a72.js.map"}